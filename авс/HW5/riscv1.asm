    .data
max_value:    .word 2147483647         # Максимальное значение для 32-разрядного знакового числа
msg:          .asciz "Максимальное значение аргумента: %d\n"

    .text
    .globl main

# Подпрограмма для вычисления максимального n, для которого n! <= max_value
# Возвращает результат в a0
factorial:
    li t0, 1                        # t0 будет хранить текущий факториал (1)
    li t1, 1                        # t1 - текущее n (начинаем с 1)

    lw t2, max_value                # Загружаем max_value в t2

factorial_loop:
    mul t3, t0, t1                  # t3 = t0 * t1 (вычисляем следующий факториал)
    
    # Проверка на переполнение
    blt t3, zero, end                 # если t3 > max_value, выходим из цикла
    mv t0, t3                       # обновляем t0 (факториал)
    addi t1, t1, 1                  # t1 = t1 + 1 (увеличиваем n)
    j factorial_loop                 # продолжаем цикл

end:
    addi t1, t1, -1                  # Уменьшаем t1, так как оно стало больше max_value
    mv a0, t1                       # Возвращаем значение n в a0
    ret                              # Возврат из подпрограммы

# Главная функция
main:
    jal factorial                    # Вызываем подпрограмму для вычисления факториала
    li a7, 1                         # Код системного вызова для print_int
    mv a0, a0                       # Параметр для вывода (результат в a0)
    ecall                            # Выполняем системный вызов для печати результата

    la a1, msg                       # Загружаем адрес строки для вывода
    li a7, 4                         # Код системного вызова для print_string
    ecall                            # Печатаем сообщение

    li a7, 10                        # Код системного вызова для exit
    ecall                            # Завершение программы
